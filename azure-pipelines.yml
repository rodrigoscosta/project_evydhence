trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(Build.ArtifactStagingDirectory)\apks'
  clientesPath: 'assets\clientes'
  apkName: 'Consorcio'

stages:
- stage: Build
  jobs:
  - job: BuildApks
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
      displayName: 'Instalar Java 11'

    - task: FlutterInstall@0
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'

    - powershell: |
        # Verifica se o diretorio do cliente existe
        if (-Not (Test-Path -Path $(clientesPath))) {
          Write-Host "diretorio de clientes nao encontrado: $(clientesPath)"
          exit
        }

        # Obtem lista de subpastas no diretorio do cliente
        $subpastas = Get-ChildItem -Path $(clientesPath) -Directory

        foreach ($pasta in $subpastas) {
          $cliente = $pasta.Name
          $clientePath = Join-Path -Path $(clientesPath) -ChildPath $cliente
          $alias = $cliente
          $arquivoJks = "android-key\$cliente.jks"

          # Verifica se o diretorio do cliente existe antes de processar
          if (-Not (Test-Path -Path $(clientesPath))) {
            Write-Host "diretorio nao encontrado para o cliente: $clientePath" -ForegroundColor Red
            continue
          }
          Write-Host $clientePath

          Write-Host "========================================================="
          Write-Host "Processando cliente: $cliente"
          Write-Host "========================================================="

          # Sobrescrever arquivos de configuracao
          Write-Host "Sobrescrevendo arquivos de configuracao"

          if (Test-Path -Path "$clientePath\Icons\") {
            Copy-Item -Path "$clientePath\Icons\" -Destination "android\app\src\main\res\" -Recurse -Force
          }
          else {
            Write-Host "Ícones nao encontrados para o cliente: $clientePath\Icons\" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\dotenv") {
            Copy-Item -Path "$clientePath\dotenv" -Destination "dotenv" -Force
            Copy-Item -Path "$clientePath\dotenv" -Destination "assets\dotenv" -Force
          }
          else {
            Write-Host "Arquivo dotenv nao encontrado para o cliente: $clientePath\dotenv" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\AndroidManifest.xml") {
            Copy-Item -Path "$clientePath\AndroidManifest.xml" -Destination "android\app\src\main\AndroidManifest.xml" -Force
            Copy-Item -Path "$clientePath\AndroidManifest.xml" -Destination "android\app\src\debug\AndroidManifest.xml" -Force
          }
          else {
            Write-Host "Arquivo AndroidManifest.xml nao encontrado para o cliente: $clientePath\AndroidManifest.xml" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\build.gradle") {
            Copy-Item -Path "$clientePath\build.gradle" -Destination "android\app\build.gradle" -Force
          }
          else {
            Write-Host "Arquivo build.gradle nao encontrado para o cliente: $clientePath\build.gradle" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\MainActivity.kt") {
            Copy-Item -Path "$clientePath\MainActivity.kt" -Destination "android\app\src\main\kotlin\com\example\MainActivity.kt" -Force
          }
          else {
            Write-Host "Arquivo MainActivity.kt nao encontrado para o cliente: $clientePath\MainActivity.kt" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\key.properties") {
            Copy-Item -Path "$clientePath\key.properties" -Destination "android\key.properties" -Force
          }
          else {
            Write-Host "Arquivo key.properties nao encontrado para o cliente: $clientePath\key.properties" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\images\background.png") {
            Copy-Item -Path "$clientePath\images\background.png" -Destination "images\background.png" -Force
          }
          else {
            Write-Host "Imagem background.png nao encontrada para o cliente: $clientePath\images\background.png" -ForegroundColor Red
            continue
          }

          if (Test-Path -Path "$clientePath\images\icon.png") {
            Copy-Item -Path "$clientePath\images\icon.png" -Destination "images\icon.png" -Force
          }
          else {
            Write-Host "Imagem icon.png nao encontrada para o cliente: $clientePath\images\icon.png" -ForegroundColor Red
            continue
          }

          # Criar JKS se necessário
          if (-Not (Test-Path -Path $arquivoJks)) {
            .\GeracaoJKS.bat $cliente
          }

          # Limpar build anterior
          Write-Host "Limpando build anterior..."
          flutter clean

          # Gerar APK release nao assinado
          Write-Host "Gerando APK release nao assinado..."
          flutter build apk
          Write-Host "Copiando APK cliente $cliente$apkName"
          Copy-Item -Path "build\app\outputs\flutter-apk\app-release.apk" -Destination "$cliente$apkName\app-release.apk"

          # Gerar AAB nao assinado
          Write-Host "Gerando AAB nao assinado..."
          flutter build appbundle

          # Criar diretório para arquivos assinados, se não existir
          $assinadosPath = "assinados\$cliente"
          if (-Not (Test-Path -Path $assinadosPath)) {
            New-Item -ItemType Directory -Path $assinadosPath
          }

          # Assinar o APK/AAB
          Write-Host "Processo de assinatura do APK..."
          & jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $arquivoJks -storepass $cliente "build\app\outputs\flutter-apk\app-release.apk" $alias
          & jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $arquivoJks -storepass $cliente "build\app\outputs\bundle\release\app-release.aab" $alias

          # Copiar arquivos assinados para o diretório de assinados
          Copy-Item -Path "build\app\outputs\flutter-apk\app-release.apk" -Destination "$assinadosPath\app-release-assinado.apk" -Force
          Copy-Item -Path "build\app\outputs\bundle\release\app-release.aab" -Destination "$assinadosPath\app-release-assinado.aab" -Force

          Write-Host "Assinatura do APK realizada..."
        }

      displayName: 'Build dos APKs para todos os clientes'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(outputDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish APKs'
